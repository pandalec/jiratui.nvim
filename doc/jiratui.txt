*jiratui.nvim*                              Telescope-powered Jira picker for Neovim

==============================================================================
INTRODUCTION                                                       *jiratui.nvim-intro*

jiratui.nvim lets you browse, group, preview, and open Jira issues directly
from Neovim using Telescope. It can optionally create/switch Git branches and
craft commit messages from issues.

IMPORTANT:
- This plugin builds ON TOP OF the CLI tool:
  https://github.com/whyisdifficult/jiratui
- It REUSES the same configuration file as `jiratui` (credentials, predefined JQL).
- You must have the `jiratui` CLI installed and configured.

Status: pre-alpha (APIs and defaults may change).


==============================================================================
REQUIREMENTS                                                      *jiratui.nvim-req*

- Neovim >= 0.10
- telescope.nvim
- toggleterm.nvim (for opening the external `jiratui` TUI)
- curl (HTTP)
- yq (parse YAML used by `jiratui`)
- jiratui (CLI) configured


==============================================================================
INSTALLATION                                                   *jiratui.nvim-install*

Note: The Lazy.nvim example below is untested.

Example (lazy.nvim):

>lua
    {
      "pandalec/jiratui.nvim",
      dependencies = {
        "nvim-telescope/telescope.nvim",
        "akinsho/toggleterm.nvim",
      },
      config = function()
        require("jiratui").setup({})
      end,
    }

Neovim 0.12 nightly — via vim.pack:

>lua
    -- init.lua
    vim.pack.add({
      { src = "https://github.com/nvim-telescope/telescope.nvim" },
      { src = "https://github.com/akinsho/toggleterm.nvim" },
      { src = "https://github.com/pandalec/jiratui.nvim" },
    })

    require("jiratui").setup({})


==============================================================================
CONFIGURATION FILE (from jiratui CLI)                 *jiratui.nvim-jiratui-config*

Search order:
1. $JIRA_TUI_CONFIG_FILE
2. $XDG_CONFIG_HOME/jiratui/config.yaml
3. $HOME/.config/jiratui/config.yaml

Example keys (see jiratui README for full schema):
https://github.com/whyisdifficult/jiratui?tab=readme-ov-file#settings

>yaml
    # Required authentication
    jira_api_base_url: https://your-company.atlassian.net
    jira_api_username: you@example.com
    jira_api_token: atlassian-token

    # Predefined JQL expressions
    pre_defined_jql_expressions:
      10:
        label: My Open Issues
        expression: assignee = currentUser() AND statusCategory != Done ORDER BY updated DESC
      20:
        label: Project PROJ
        expression: project = "PROJ" ORDER BY updated DESC
      30:
        label: repository-name # use as default if name matches repository with default_jql_id = -1
        expression: project = "PROJ" ORDER BY updated DESC


==============================================================================
SETUP OPTIONS                                                   *jiratui.nvim-setup*

>lua
    require("jiratui").setup({
      debug = false,
      disable_startup_notification = false,
      keymaps = true,
      load_on_found_jql_id = false,
      load_on_startup = true,

      cache = {
        background_refresh = true,
        enabled = true,
        path = nil,
        ttl_minutes = 10,
      },

      git = {
        branch_template = "{key}-{slug}",
        commit_template = "{key} {summary}",
        enabled = true,
        remote = "origin",
      },

      telescope = {
        group_by = "none",
        group_custom_fields = {}, -- Add custom group_by fields with { id = "customfield_XXXXX", name = "Custom" }
        picker_fields = { "key", "summary", "status", "assignee", "priority", "fixVersions" },
        preview_fields = { "description", "fixVersions" },
        show_group_headers = true,
        sort_by = "updated",
      },

      terminal = {
        float_opts = { border = "rounded", title_pos = "center" },
      },

      filters = {
        assignee = nil,
        day_interval = nil,
        default_jql_id = nil, -- -1 ⇒ auto from repo name
        max_results = 100, -- -1 all results, >100 with pagination
        project = nil,
        status = nil,
      },
    })

Notes:
- `load_on_found_jql_id = true` ⇒ the plugin activates only when the current Git
  repository name matches a JQL label defined in your YAML.
- `disable_startup_notification = true` ⇒ suppress the “plugin disabled” notice.
- `filters.default_jql_id = -1` ⇒ auto-select JQL id by matching the repo name
  to a label in `pre_defined_jql_expressions`.
- `filters.max_results == -1` or any `> 100` ⇒ pagination fetches all issues.
- `fixVersions` is treated as a list; list view shows the first value.


==============================================================================
USAGE                                                           *jiratui.nvim-usage*

Commands:
- :JiraTasks         Open the Telescope picker
- :JiraTasksRefresh  Refresh the issues cache

If `load_on_found_jql_id = true` and no matching label is found for the current
repo, the plugin is disabled and commands are not registered.

Default keymaps (when `keymaps = true`):
- Normal:
    <leader>jj  -> :JiraTasks
    <leader>jr  -> :JiraTasksRefresh
    <leader>jt  -> Open external `jiratui` TUI for configured project/jql
- Picker:
    <CR>        Open external `jiratui` TUI (jiratui ui [-w <KEY>] [-p <project>] [-j <id>])
    <C-o>       Open issue in browser
    <C-r>       Refresh issues
    <C-i>/<C-p> Toggle preview
    ?           Toggle help overlay
    <C-g>       Cycle grouping forward
    <C-S-g>     Cycle grouping backward
    <C-f>       Open value-filter menu for CURRENT group (checkbox UI)
    <C-b>       Create/Switch Git branch from selected issue (if Git enabled)

Grouping:
- `telescope.group_by` can be "none", "status", "assignee", "type",
  or any "customfield_XXXXX".
- Grouping by a multi-value custom field duplicates entries per value.

Value filters (checkbox UI):
- Press <C-f> to open group value menu with counts.
- Toggle entries (Space/Tab), press <CR> to apply.
- Filters accumulate across groups and persist for the NVIM session.


==============================================================================
GIT INTEGRATION (OPTIONAL)                                    *jiratui.nvim-git*

Templates:
- {key}     -> issue key (e.g. PROJ-123)
- {slug}    -> URL-safe lowercase summary (e.g. fix-login-timeout)
- {summary} -> full summary text

API (require("jiratui.git")):
>lua
    local git = require("jiratui.git")
    git.get_branch_name(issue)         -- string, from branch_template
    git.get_commit_message(issue)      -- string, from commit_template
    git.create_branch(issue)           -- ok, err
    git.switch_branch(issue)           -- ok, err
    git.create_or_switch_branch(issue) -- ok, err

From the picker: <C-b> creates/switches branch for the selected issue.


==============================================================================
TERMINAL / EXTERNAL TUI                                  *jiratui.nvim-terminal*

The picker uses ToggleTerm to run the external `jiratui` TUI:

    jiratui ui [-w <KEY>] [-p <project>] [-j <jql_id>]

From Lua:
>lua
    require("jiratui.terminal").open_jiratui(key, project, jql_id)


==============================================================================
HEALTHCHECK                                                *jiratui.nvim-health*

Run:
    :checkhealth jiratui

Checks:
- NVIM version
- curl/yq
- telescope/toggleterm presence
- jiratui YAML path and parse
- default_jql_id exists in YAML (if set)
- cache path writability


==============================================================================
TROUBLESHOOTING                                        *jiratui.nvim-troubleshoot*

Q: Plugin disabled at startup
A: If load_on_found_jql_id = true, the plugin activates only when the current
   repository name matches a label in the YAML. Disable the option or add a
   matching label. Set disable_startup_notification = true to suppress the notice.

Q: default_jql_id not found
A: Ensure the id exists under pre_defined_jql_expressions in the YAML. Or set
   filters.default_jql_id = -1 to auto-select by repo name.

Q: No results / too many results
A: Tune filters: project, assignee, status, day_interval. Set max_results = -1
   or >100 to enable pagination.

Q: Custom field columns empty
A: Include the field id in telescope.picker_fields and/or telescope.preview_fields.
   For friendly headers, add to telescope.group_custom_fields with { id, name }.


==============================================================================
CREDITS & LICENSE                                         *jiratui.nvim-credits*

- Built on the CLI tool: whyisdifficult/jiratui
  https://github.com/whyisdifficult/jiratui
- License: MIT (see repository)

Contributions welcome.
